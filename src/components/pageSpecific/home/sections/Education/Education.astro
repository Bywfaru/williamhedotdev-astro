---
import type { EducationItemProps } from './components/EducationItem/EducationItem.astro';
import EducationItem from './components/EducationItem/EducationItem.astro';

export type EducationProps = {
  items: EducationItemProps[];
};
type Props = EducationProps;

const { items } = Astro.props;
---

<script>
  import { gsap } from '@/utils';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const educationSection = document.querySelector('#education');

  const timeline = gsap.timeline({
    scrollTrigger: {
      trigger: educationSection,
    },
    defaults: {
      delay: -0.25,
      duration: 0.5,
    },
  });

  const educationHeading = document.querySelector('.educationHeading');
  const educationSubheading = document.querySelector('.educationSubheading');

  timeline
    .to(educationHeading, { y: 0, opacity: 1 })
    .to(educationSubheading, { y: 0, opacity: 1 });

  const educationContent = document.querySelector('.educationContent');
  const educationItemsTimeline = gsap.timeline({
    scrollTrigger: {
      trigger: educationContent,
      start: 'top 90%',
      end: 'bottom 100%',
      scrub: 0.5,
    },
    delay: timeline.duration(),
    defaults: {
      delay: -0.25,
      duration: 0.5,
    },
  });

  const educationItems = document.querySelectorAll('.educationItem');

  educationItems.forEach((educationItem) => {
    const educationTimelineAbove = educationItem.querySelector(
      '.educationTimelineAbove'
    );
    const educationTimelineMarker = educationItem.querySelector(
      '.educationTimelineMarker'
    );
    const educationTimelineBelow = educationItem.querySelector(
      '.educationTimelineBelow'
    );
    const educationSchoolLogo = educationItem.querySelector(
      '.educationSchoolLogo'
    );
    const educationDates = educationItem.querySelector('.educationDates');
    const educationSchoolName = educationItem.querySelector(
      '.educationSchoolName'
    );
    const educationDegree = educationItem.querySelector('.educationDegree');
    const educationMajorOption = educationItem.querySelector(
      '.educationMajorOption'
    );
    const educationDescription = educationItem.querySelector(
      '.educationDescription'
    );

    if (educationTimelineAbove)
      educationItemsTimeline.to(educationTimelineAbove, { height: 14 });
    if (educationTimelineMarker)
      educationItemsTimeline.to(educationTimelineMarker, { width: '100%' });

    educationItemsTimeline.to(educationSchoolLogo, { x: 0, opacity: 1 });
    educationItemsTimeline.to(educationDates, { x: 0, opacity: 1 });
    educationItemsTimeline.to(educationSchoolName, { x: 0, opacity: 1 });
    educationItemsTimeline.to(educationDegree, { x: 0, opacity: 1 });
    educationItemsTimeline.to(educationMajorOption, { x: 0, opacity: 1 });
    educationItemsTimeline.to(educationDescription, { x: 0, opacity: 1 });

    if (educationTimelineBelow)
      educationItemsTimeline.to(educationTimelineBelow, { height: '100%' });
  });
</script>

<section
  id="education"
  class:list={[
    'w-full',
    'flex',
    'flex-col',
    'gap-5',
    'justify-center',
    'md:flex-row-reverse',
    'md:justify-between',
    'md:gap-20',
    '[&>*]:md:flex-1',
  ]}
>
  {
    (Astro.slots.has('heading') || Astro.slots.has('subheading')) && (
      <div
        class:list={[
          'flex',
          'flex-col',
          'w-full',
          'gap-2',
          'md:items-end',
          'md:text-right',
        ]}
      >
        {Astro.slots.has('heading') && (
          <h2
            class:list={[
              'educationHeading',
              'translate-y-12',
              'opacity-0',
              'text-accent-1',
              'font-bold',
              'text-6xl',
            ]}
          >
            <slot name="heading" />
          </h2>
        )}

        {Astro.slots.has('subheading') && (
          <h3
            class:list={[
              'educationSubheading',
              'translate-y-12',
              'opacity-0',
              'text-tertiary',
              'font-mono',
              'text-xl',
            ]}
          >
            <slot name="subheading" />
          </h3>
        )}
      </div>
    )
  }

  <div class:list={['educationContent', 'flex', 'flex-col']}>
    {
      items.map((item, index) => {
        const key = Math.random().toString(36).substring(2, 9);

        return (
          <div id={key} class:list={['educationItem']}>
            <EducationItem
              {...item}
              showAboveTimeline={index !== 0}
              showBelowTimeline={index !== items.length - 1}
              showMarker
            />
          </div>
        );
      })
    }
  </div>
</section>
